---
interface Props {
  url: string;
  title: string;
  description?: string;
  image?: string;
}

const { url, title, description, image } = Astro.props;

// Encode sharing URLs
const encodedUrl = encodeURIComponent(url);
const encodedTitle = encodeURIComponent(title);
const encodedDescription = encodeURIComponent(description || '');
const encodedImage = image ? encodeURIComponent(image) : '';

const shareLinks = [
  {
    name: 'Facebook',
    url: `https://www.facebook.com/sharer/sharer.php?u=${encodedUrl}`,
    icon: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M18.77 7.46H14.5v-1.9c0-.9.6-1.1 1-1.1h3V.5h-4.33C10.24.5 9.5 3.44 9.5 5.32v2.15h-3v4h3v12h5v-12h3.85l.42-4z"/></svg>`
  },
  {
    name: 'Twitter',
    url: `https://twitter.com/intent/tweet?url=${encodedUrl}&text=${encodedTitle}`,
    icon: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M23.44 4.83c-.8.37-1.5.38-2.22.02.93-.56.98-.96 1.32-2.02-.88.52-1.86.9-2.9 1.1-.82-.88-2-1.43-3.3-1.43-2.5 0-4.55 2.04-4.55 4.54 0 .36.03.7.1 1.04-3.77-.2-7.12-2-9.36-4.75-.4.67-.6 1.45-.6 2.3 0 1.56.8 2.95 2 3.77-.74-.03-1.44-.23-2.05-.57v.06c0 2.2 1.56 4.03 3.64 4.44-.67.2-1.37.2-2.06.08.58 1.8 2.26 3.12 4.25 3.16C5.78 18.1 3.37 18.74 1 18.46c2 1.3 4.4 2.04 6.97 2.04 8.35 0 12.92-6.92 12.92-12.93 0-.2 0-.4-.02-.6.9-.63 1.96-1.22 2.56-2.14z"/></svg>`
  },
  {
    name: 'LinkedIn',
    url: `https://www.linkedin.com/shareArticle?mini=true&url=${encodedUrl}&title=${encodedTitle}&summary=${encodedDescription}`,
    icon: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/></svg>`
  }
];
---

<div class="share-section" data-url={url}>
  <div class="share-buttons">
    {shareLinks.map(link => (
      <button 
        class="share-button tooltip" 
        data-platform={link.name.toLowerCase()}
        aria-label={`Share on ${link.name}`}
        data-share-url={link.url}
        data-tooltip={`Share on ${link.name}`}
      >
        <Fragment set:html={link.icon} />
        <span class="tooltip-text">{`Share on ${link.name}`}</span>
      </button>
    ))}
    <button class="share-button tooltip copy-link" aria-label="Copy link">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path>
        <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
      </svg>
      <span class="tooltip-text">Copy link</span>
    </button>
  </div>
</div>

<style>
  .share-section {
    display: flex;
    justify-content: flex-end;
    padding: 0;
    margin: 0;
  }

  .share-buttons {
    display: flex;
    gap: 0.75rem;
    align-items: center;
  }

  .share-button {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    padding: 0;
    border: 1px solid var(--border-color, #eee);
    background: white;
    color: var(--secondary-color);
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .share-button:hover {
    color: var(--accent-color);
    border-color: var(--accent-color);
    transform: translateY(-2px);
  }

  .share-button svg {
    width: 18px;
    height: 18px;
  }

  /* Tooltip styles */
  .tooltip {
    position: relative;
  }

  .tooltip-text {
    visibility: hidden;
    position: absolute;
    bottom: calc(100% + 10px);
    left: 50%;
    transform: translateX(-50%);
    background: var(--secondary-color);
    color: white;
    text-align: center;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    white-space: nowrap;
    opacity: 0;
    transition: opacity 0.2s ease;
    pointer-events: none;
    z-index: 1000;
  }

  .tooltip-text::after {
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border-width: 5px;
    border-style: solid;
    border-color: var(--secondary-color) transparent transparent transparent;
  }

  .tooltip:hover .tooltip-text {
    visibility: visible;
    opacity: 1;
  }

  .copy-feedback {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background: var(--accent-color);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.9rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    transform: translateY(100%);
    opacity: 0;
    transition: all 0.3s ease;
    z-index: 1000;
  }

  .copy-feedback.visible {
    transform: translateY(0);
    opacity: 1;
  }

  @media (max-width: 768px) {
    .share-button {
      width: 32px;
      height: 32px;
    }

    .share-button svg {
      width: 16px;
      height: 16px;
    }
  }
</style>

<script>
  // Handle share button clicks
  const shareButtons = document.querySelectorAll('.share-button');
  shareButtons.forEach(button => {
    if (button.classList.contains('copy-link')) {
      button.addEventListener('click', handleCopyLink);
    } else {
      button.addEventListener('click', handleShare);
    }
  });

  function handleShare(e: Event) {
    const button = e.currentTarget as HTMLButtonElement;
    const shareUrl = button.dataset.shareUrl;
    if (!shareUrl) return;

    window.open(shareUrl, '_blank', 'width=600,height=400');
  }

  async function handleCopyLink() {
    const container = document.querySelector('.share-section');
    if (!container) return;

    const url = container.getAttribute('data-url');
    if (!url) return;

    try {
      await navigator.clipboard.writeText(url);
      showCopyFeedback('Link copied!');
    } catch (err) {
      showCopyFeedback('Failed to copy link');
    }
  }

  function showCopyFeedback(message: string) {
    const existingFeedback = document.querySelector('.copy-feedback');
    if (existingFeedback) {
      existingFeedback.remove();
    }

    const feedback = document.createElement('div');
    feedback.className = 'copy-feedback';
    feedback.textContent = message;
    document.body.appendChild(feedback);

    requestAnimationFrame(() => {
      feedback.classList.add('visible');
    });

    setTimeout(() => {
      feedback.classList.remove('visible');
      setTimeout(() => {
        feedback.remove();
      }, 300);
    }, 2000);
  }
</script> 