---
interface Props {
  creature: {
    name: string;
    image: string;
    modelId?: string;
  };
}

const { creature } = Astro.props;
---

{creature.modelId && (
  <div class="visualization-container">
    <div class="model-view">
      <div class="model-viewer-wrapper">
        <iframe
          title={`3D Model of ${creature.name}`}
          src={`https://sketchfab.com/models/${creature.modelId}/embed?autostart=1&ui_controls=1&ui_infos=1&ui_watermark=1`}
          frameborder="0"
          allow="autoplay; fullscreen; xr-spatial-tracking"
          loading="lazy"
        ></iframe>
      </div>
      <!-- Fallback to image if model fails to load -->
      <div class="fallback-image" style={`background-image: url(${creature.image})`}>
        <div class="loading-overlay">Loading 3D Model...</div>
      </div>
    </div>
  </div>
)}

<style>
  .visualization-container {
    width: 100%;
    height: 400px;
    position: relative;
    margin: 2rem 0;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .model-view {
    width: 100%;
    height: 100%;
    position: relative;
  }

  .model-viewer-wrapper {
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: 2;
  }

  .model-viewer-wrapper iframe {
    width: 100%;
    height: 100%;
    border: none;
  }

  .fallback-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-size: cover;
    background-position: center;
  }

  .loading-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(0,0,0,0.5);
    color: white;
    font-size: 1.2rem;
    opacity: 1;
    transition: opacity 0.3s ease;
  }

  .model-viewer-wrapper:not(:empty) + .fallback-image .loading-overlay {
    opacity: 0;
    pointer-events: none;
  }

  @media (max-width: 768px) {
    .visualization-container {
      height: 300px;
      margin: 1rem 0;
    }
  }
</style>

<script>
// Handle model loading errors
document.addEventListener('DOMContentLoaded', () => {
  const iframes = document.querySelectorAll('.model-viewer-wrapper iframe');
  iframes.forEach(iframe => {
    iframe.onerror = () => {
      iframe.parentElement?.classList.add('load-error');
    };
  });
});
</script> 