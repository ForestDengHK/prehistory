---
interface Props {
    creatureId: string;
}

const { creatureId } = Astro.props;
---

<div class="comment-container">
    <div class="action-buttons">
        <button id={`like-button-${creatureId}`} class="like-button" aria-label="Like Creature">
            <span class="like-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
                </svg>
            </span>
            <span id={`like-count-${creatureId}`} class="like-count">0</span>
        </button>
        <button id={`comment-button-${creatureId}`} class="comment-button" aria-label="Add Comment">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
            </svg>
        </button>
    </div>
</div>

<!-- Comment Modal -->
<div id={`comment-modal-${creatureId}`} class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Add Comment</h2>
            <button id={`close-modal-${creatureId}`} class="close-button" aria-label="Close">Ã—</button>
        </div>
        <form id={`comment-form-${creatureId}`}>
            <div class="form-group">
                <label for={`name-${creatureId}`}>Name <span class="required">*</span></label>
                <input type="text" id={`name-${creatureId}`} name="name" placeholder="Your name" required>
            </div>
            <div class="form-group">
                <label for={`emoji-input-${creatureId}`}>Choose an emoji</label>
                <div class="emoji-picker-container">
                    <input type="text" id={`emoji-input-${creatureId}`} readonly placeholder="Click to select emoji" value="ðŸ‘¤">
                    <emoji-picker id={`emoji-picker-${creatureId}`} class="light"></emoji-picker>
                </div>
            </div>
            <div class="form-group">
                <label for={`email-${creatureId}`}>Email <span class="optional">(optional)</span></label>
                <input type="email" id={`email-${creatureId}`} name="email" placeholder="Your email address">
            </div>
            <div class="form-group">
                <label for={`comment-${creatureId}`}>Comment <span class="required">*</span></label>
                <textarea id={`comment-${creatureId}`} name="comment" placeholder="Share your thoughts... Markdown and HTML are supported" required></textarea>
                <small class="format-hint">You can use Markdown and HTML formatting (e.g., **bold**, *italic*, [links](url), etc.)</small>
            </div>
            <div class="form-group captcha-group">
                <label for={`captcha-${creatureId}`}>Verify you're human <span class="required">*</span></label>
                <div class="captcha-container">
                    <span id={`captcha-question-${creatureId}`} class="captcha-question"></span>
                    <input type="number" id={`captcha-${creatureId}`} name="captcha" required placeholder="Enter the answer" min="0" max="100">
                    <input type="hidden" id={`captcha-token-${creatureId}`} name="captcha-token">
                    <button type="button" id={`refresh-captcha-${creatureId}`} class="refresh-captcha" aria-label="New Question">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M21.5 2v6h-6M2.5 22v-6h6M2 11.5a10 10 0 0 1 18.8-4.3M22 12.5a10 10 0 0 1-18.8 4.3"/>
                        </svg>
                    </button>
                </div>
            </div>
            <button type="submit" class="submit-button">Post Comment</button>
        </form>
    </div>
</div>

<script>
    import 'emoji-picker-element';
</script>

<script define:vars={{ creatureId }}>
    const commentButton = document.getElementById(`comment-button-${creatureId}`);
    const modal = document.getElementById(`comment-modal-${creatureId}`);
    const closeButton = document.getElementById(`close-modal-${creatureId}`);
    const form = document.getElementById(`comment-form-${creatureId}`);
    const emojiInput = document.getElementById(`emoji-input-${creatureId}`);
    const emojiPicker = document.getElementById(`emoji-picker-${creatureId}`);
    const captchaQuestion = document.getElementById(`captcha-question-${creatureId}`);
    const captchaInput = document.getElementById(`captcha-${creatureId}`);
    const captchaToken = document.getElementById(`captcha-token-${creatureId}`);
    const refreshCaptcha = document.getElementById(`refresh-captcha-${creatureId}`);

    // Initialize emoji picker
    emojiPicker.classList.add('hidden');
    
    emojiInput.addEventListener('click', () => {
        emojiPicker.classList.toggle('hidden');
    });

    document.addEventListener('click', (e) => {
        if (!emojiPicker.contains(e.target) && e.target !== emojiInput) {
            emojiPicker.classList.add('hidden');
        }
    });

    emojiPicker.addEventListener('emoji-click', (event) => {
        emojiInput.value = event.detail.unicode;
        emojiPicker.classList.add('hidden');
    });

    // Open modal
    commentButton.addEventListener('click', () => {
        modal.classList.add('show');
        document.body.style.overflow = 'hidden';
    });

    // Close modal
    closeButton.addEventListener('click', () => {
        modal.classList.remove('show');
        document.body.style.overflow = '';
    });

    // Close modal when clicking outside
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.classList.remove('show');
            document.body.style.overflow = '';
        }
    });

    // Generate CAPTCHA
    function generateCaptcha() {
        const num1 = Math.floor(Math.random() * 10) + 1;
        const num2 = Math.floor(Math.random() * 10) + 1;
        const answer = num1 + num2;
        const token = btoa(`${Date.now()}-${answer}`);
        
        captchaQuestion.textContent = `What is ${num1} + ${num2}?`;
        captchaToken.value = token;
        captchaInput.value = '';
    }

    // Initialize CAPTCHA
    generateCaptcha();

    // Refresh CAPTCHA
    refreshCaptcha.addEventListener('click', generateCaptcha);

    // Handle form submission
    form.addEventListener('submit', async (e) => {
        e.preventDefault();

        const formData = new FormData(form);
        const data = {
            name: formData.get('name'),
            email: formData.get('email'),
            comment: formData.get('comment'),
            emoji: emojiInput.value,
            captchaToken: captchaToken.value,
            captchaAnswer: parseInt(formData.get('captcha'))
        };

        try {
            const response = await fetch(`/api/comments/${creatureId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            if (!response.ok) {
                throw new Error('Failed to submit comment');
            }

            // Clear form
            form.reset();
            emojiInput.value = 'ðŸ‘¤'; // Reset emoji to default
            
            // Close modal
            modal.classList.remove('show');
            document.body.style.overflow = '';

            // Refresh only the comments section
            const commentsResponse = await fetch(`/api/comments/${creatureId}`);
            if (commentsResponse.ok) {
                const comments = await commentsResponse.json();
                const commentsList = document.querySelector('.comments-list');
                if (commentsList) {
                    if (comments && comments.length > 0) {
                        commentsList.innerHTML = comments.map(comment => {
                            const date = new Date(comment.createdAt);
                            const formattedDate = new Intl.DateTimeFormat('en-US', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit'
                            }).format(date);

                            return `
                                <div class="comment">
                                    <div class="comment-header">
                                        <span class="commenter-name"><span class="commenter-emoji">${comment.emoji || 'ðŸ‘¤'}</span> ${comment.name}</span>
                                        <span class="comment-date">${formattedDate}</span>
                                    </div>
                                    <p class="comment-text">${comment.comment}</p>
                                </div>`;
                        }).join('');
                    } else {
                        commentsList.innerHTML = `
                            <div class="no-comments">
                                No comments yet. Be the first to share your thoughts!
                            </div>`;
                    }

                    // Update comment count
                    const commentsTitle = document.querySelector('.comments-section h2');
                    if (commentsTitle) {
                        commentsTitle.textContent = `Comments (${comments ? comments.length : 0})`;
                    }
                }
            }
        } catch (error) {
            console.error('Error submitting comment:', error);
            alert('Failed to submit comment. Please try again.');
        }
    });

    // Like button functionality
    const likeButton = document.getElementById(`like-button-${creatureId}`);
    const likeCount = document.getElementById(`like-count-${creatureId}`);
    
    // Check if user has liked this creature
    const hasLiked = localStorage.getItem(`liked-${creatureId}`);
    if (hasLiked) {
        likeButton.classList.add('liked');
    }
    
    // Fetch initial like count
    async function fetchLikeCount() {
        try {
            const response = await fetch(`/api/likes/${creatureId}`);
            if (response.ok) {
                const data = await response.json();
                likeCount.textContent = data.likes;
                if (data.hasLiked) {
                    likeButton.classList.add('liked');
                }
            }
        } catch (error) {
            console.error('Error fetching likes:', error);
        }
    }
    
    fetchLikeCount();
    
    // Handle like button click
    likeButton.addEventListener('click', async () => {
        try {
            const response = await fetch(`/api/likes/${creatureId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            if (response.ok) {
                const data = await response.json();
                likeCount.textContent = data.likes;
                likeButton.classList.toggle('liked');
                
                // Store like state in localStorage
                if (data.hasLiked) {
                    localStorage.setItem(`liked-${creatureId}`, 'true');
                } else {
                    localStorage.removeItem(`liked-${creatureId}`);
                }
                
                // Add heart animation
                const heart = document.createElement('div');
                heart.className = 'heart-animation';
                likeButton.appendChild(heart);
                setTimeout(() => heart.remove(), 1000);
            }
        } catch (error) {
            console.error('Error updating likes:', error);
        }
    });
</script>

<style>
    .comment-container {
        position: fixed;
        right: 2rem;
        bottom: 2rem;
        z-index: 100;
        display: flex;
        gap: 1rem;
    }

    .action-buttons {
        display: flex;
        gap: 1rem;
        align-items: center;
    }

    .like-button {
        background-color: white;
        color: var(--text-color);
        border: 2px solid var(--primary-color);
        border-radius: 50%;
        width: 3.5rem;
        height: 3.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
        transition: all 0.3s ease;
        position: relative;
    }

    .like-button:hover {
        transform: translateY(-2px);
        border-color: var(--accent-color);
        color: var(--accent-color);
    }

    .like-button.liked {
        background-color: var(--accent-color);
        border-color: var(--accent-color);
        color: white;
    }

    .like-button.liked svg {
        fill: currentColor;
    }

    .like-count {
        position: absolute;
        top: -8px;
        right: -8px;
        background-color: var(--primary-color);
        color: white;
        border-radius: 12px;
        padding: 2px 6px;
        font-size: 0.75rem;
        font-weight: bold;
        min-width: 20px;
        text-align: center;
    }

    .heart-animation {
        position: absolute;
        pointer-events: none;
        animation: heart-burst 1s ease-out forwards;
        opacity: 0;
    }

    @keyframes heart-burst {
        0% {
            transform: scale(1);
            opacity: 1;
        }
        50% {
            transform: scale(1.5);
            opacity: 0.5;
        }
        100% {
            transform: scale(2);
            opacity: 0;
        }
    }

    .comment-button {
        background-color: var(--primary-color);
        color: white;
        border: none;
        border-radius: 50%;
        width: 3.5rem;
        height: 3.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
        transition: transform 0.3s ease, background-color 0.3s ease;
    }

    .comment-button:hover {
        background-color: var(--accent-color);
        transform: translateY(-2px);
    }

    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        opacity: 0;
        transition: opacity 0.3s ease;
        overflow-y: auto;
    }

    .modal.show {
        display: flex;
        opacity: 1;
        align-items: flex-start;
        justify-content: center;
        padding: 1rem;
    }

    .modal-content {
        background-color: white;
        border-radius: 8px;
        width: 90%;
        max-width: 500px;
        padding: 1.5rem;
        position: relative;
        transform: translateY(20px);
        transition: transform 0.3s ease;
        margin: 2rem 0;
    }

    .modal.show .modal-content {
        transform: translateY(0);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .modal-header h2 {
        margin: 0;
        color: var(--text-color);
        font-size: 1.5rem;
    }

    .close-button {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: #666;
        padding: 0.5rem;
    }

    .close-button:hover {
        color: var(--primary-color);
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    label {
        display: block;
        margin-bottom: 0.5rem;
        color: var(--text-color);
        font-weight: 500;
    }

    input, textarea {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
        transition: border-color 0.3s ease;
    }

    textarea {
        min-height: 120px;
        resize: vertical;
    }

    input:focus, textarea:focus {
        outline: none;
        border-color: var(--primary-color);
    }

    .submit-button {
        width: 100%;
        padding: 0.75rem;
        background-color: var(--primary-color);
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.3s ease;
    }

    .submit-button:hover {
        background-color: var(--accent-color);
        transform: translateY(-2px);
    }

    @media (max-width: 768px) {
        .comment-container {
            right: 1rem;
            bottom: 1rem;
        }

        .modal-content {
            padding: 1rem;
            width: 95%;
            margin: 1rem 0;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        input, textarea {
            padding: 0.5rem;
            font-size: 16px;
        }

        textarea {
            min-height: 80px;
        }

        .modal-header h2 {
            font-size: 1.25rem;
        }

        .format-hint {
            font-size: 0.75rem;
        }

        emoji-picker {
            position: fixed;
            left: 50% !important;
            transform: translateX(-50%);
            top: auto !important;
            bottom: 0;
            width: 100%;
            max-width: 100%;
            border-radius: 12px 12px 0 0;
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
        }
    }

    @media (min-width: 769px) and (max-height: 900px) {
        .modal.show {
            align-items: flex-start;
        }

        .modal-content {
            margin: 2rem 0;
        }

        textarea {
            min-height: 100px;
        }
    }

    .required {
        color: var(--accent-color);
        margin-left: 0.2rem;
    }

    .optional {
        color: #666;
        font-size: 0.9em;
        font-weight: normal;
        margin-left: 0.2rem;
    }

    .captcha-group {
        margin-bottom: 1.5rem;
    }

    .captcha-container {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .captcha-question {
        font-size: 1rem;
        color: var(--text-color);
        background: #f5f5f5;
        padding: 0.75rem 1rem;
        border-radius: 4px;
        flex: 1;
    }

    .captcha-container input {
        width: 100px;
    }

    .refresh-captcha {
        background: none;
        border: none;
        color: var(--primary-color);
        cursor: pointer;
        padding: 0.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: transform 0.2s ease;
    }

    .refresh-captcha:hover {
        transform: rotate(180deg);
        color: var(--accent-color);
    }

    .emoji-picker-container {
        position: relative;
        width: 100%;
    }

    #emoji-input {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
        background-color: white;
    }

    #emoji-input:focus {
        outline: none;
        border-color: var(--primary-color);
    }

    emoji-picker {
        position: absolute;
        top: 100%;
        left: 0;
        z-index: 1000;
        width: 100%;
        max-width: 352px;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    }

    emoji-picker.hidden {
        display: none;
    }

    .commenter-emoji {
        font-size: 1rem;
        vertical-align: middle;
        margin-right: 0.2rem;
    }

    .commenter-name {
        display: flex;
        align-items: center;
        gap: 0.3rem;
        font-weight: 500;
    }
</style> 