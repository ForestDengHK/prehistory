---
import { creatures } from '../data/creatures';

// Function to get random creatures
function getRandomCreatures(count: number) {
	const shuffled = [...creatures].sort(() => 0.5 - Math.random());
	return shuffled.slice(0, count);
}

// Function to truncate description while preserving HTML/markdown tags
function truncateDescription(description: string) {
	// Create a temporary div to parse HTML content
	const tempText = description.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
	const words = tempText.split(' ');
	
	if (words.length <= 20) return description;
	
	let count = 0;
	let result = [];
	let inTag = false;
	let currentTag = '';
	
	for (const word of words) {
		if (count >= 20 && !inTag) break;
		
		// Check for opening tags
		if (word.includes('<') && !word.includes('</')) {
			inTag = true;
			currentTag = word.substring(word.indexOf('<')+1, word.indexOf('>'));
		}
		
		result.push(word);
		
		// Check for closing tags
		if (word.includes('</')) {
			inTag = false;
			currentTag = '';
		}
		
		if (!inTag && !word.includes('>')) count++;
	}
	
	// Close any open tags
	if (inTag) {
		result.push(`</${currentTag}>`);
	}
	
	return result.join(' ') + ' ...';
}

const featuredCreatures = getRandomCreatures(3).map(creature => ({
	name: creature.name,
	period: creature.period,
	image: creature.image,
	description: truncateDescription(creature.description),
	id: creature.id
}));
---

<div class="creatures-header">
	<h2>Featured Creatures</h2>
	<button id="refresh-button" aria-label="Refresh Featured Creatures">
		<img src="/images/refresh.jpg" alt="Refresh" width="24" height="24" />
	</button>
</div>
<div class="creatures-grid">
	{featuredCreatures.map(creature => (
		<div class="creature-card">
			<div class="creature-image">
				<img src={creature.image} alt={creature.name} />
			</div>
			<div class="creature-info">
				<h3>{creature.name}</h3>
				<p class="period">{creature.period}</p>
				<p class="description" set:html={creature.description}></p>
				<a href={`/creature/${creature.id}`} class="learn-more">
					Learn More
				</a>
			</div>
		</div>
	))}
</div>

<style>
	.creatures-header {
		display: flex;
		align-items: center;
		justify-content: space-between;
		margin-bottom: 1rem;
	}

	#refresh-button {
		background: none;
		border: none;
		font-size: 1.5rem;
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: center;
		padding: 0.5rem;
		border-radius: 50%;
		transition: background-color 0.3s ease;
	}

	#refresh-button:hover {
		background-color: rgba(0, 0, 0, 0.1);
	}

	#refresh-button svg {
		width: 24px;
		height: 24px;
	}

	.creatures-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
		gap: 2rem;
	}

	.creature-card {
		background: white;
		border-radius: 8px;
		overflow: hidden;
		box-shadow: 0 2px 4px rgba(0,0,0,0.1);
		transition: transform 0.3s ease;
		display: flex;
		flex-direction: column;
		height: 100%;
	}

	.creature-card:hover {
		transform: translateY(-5px);
	}

	.creature-image {
		height: 200px;
		overflow: hidden;
	}

	.creature-image img {
		width: 100%;
		height: 100%;
		object-fit: cover;
	}

	.creature-info {
		padding: 1.5rem;
		display: flex;
		flex-direction: column;
		flex-grow: 1;
	}

	h3 {
		color: var(--primary-color);
		margin-bottom: 0.5rem;
	}

	.period {
		color: var(--accent-color);
		font-weight: bold;
		margin-bottom: 1rem;
	}

	.description {
		margin-bottom: 1.5rem;
		flex-grow: 1;
	}

	.learn-more {
		display: inline-block;
		padding: 0.5rem 1rem;
		background: var(--primary-color);
		color: white;
		text-decoration: none;
		border-radius: 4px;
		transition: background 0.3s ease;
		align-self: flex-start;
	}

	.learn-more:hover {
		background: var(--accent-color);
	}
</style>

<script>
	document.getElementById('refresh-button').addEventListener('click', () => {
		location.reload();
	});
</script>