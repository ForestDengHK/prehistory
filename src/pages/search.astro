---
import Layout from '../layouts/Layout.astro';
import { creatures, searchCreatures } from '../data/creatures';

// Function to truncate description while preserving HTML/markdown tags
function truncateDescription(description: string) {
  const tempText = description.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
  const words = tempText.split(' ');

  if (words.length <= 20) return description;

  let count = 0;
  let result = [];
  let inTag = false;
  let currentTag = '';

  for (const word of words) {
    if (count >= 20 && !inTag) break;

    // Check for opening tags
    if (word.includes('<') && !word.includes('</')) {
      inTag = true;
      currentTag = word.substring(word.indexOf('<') + 1, word.indexOf('>'));
    }

    result.push(word);

    // Check for closing tags
    if (word.includes('</')) {
      inTag = false;
      currentTag = '';
    }

    if (!inTag && !word.includes('>')) count++;
  }

  // Close any open tags
  if (inTag) {
    result.push(`</${currentTag}>`);
  }

  return result.join(' ') + ' ...';
}

const query = Astro.url.searchParams.get('q')?.trim() || '';
const page = parseInt(Astro.url.searchParams.get('page') || '1', 10);
const pageSize = 18;

// Initial server-side results
let initialResults = query ? searchCreatures(query) : creatures;
const totalResults = initialResults.length;
const initialPageResults = initialResults.slice((page - 1) * pageSize, page * pageSize);

function createPagination(total, pageSize, currentPage) {
  const totalPages = Math.ceil(total / pageSize);
  const pages = [];
  for (let i = 1; i <= totalPages; i++) {
    pages.push({
      number: i,
      isCurrent: i === currentPage,
    });
  }
  return pages;
}

const pagination = createPagination(totalResults, pageSize, page);
---

<Layout title="Search Prehistoric Creatures">
  <div class="search-container">
    <h1>Search Prehistoric Creatures</h1>
    <div class="search-form">
      <div class="search-input-wrapper">
        <input 
          type="text"
          id="search-input"
          value={query}
          placeholder="Search creatures..."
        />
      </div>
    </div>

    <div id="results-info" class="results-info">
      {query && <p>Found {totalResults} results for "{query}"</p>}
    </div>

    <div id="results-grid" class="results-grid">
      {initialPageResults.map(creature => (
        <div class="creature-card">
          <img src={creature.image} alt={creature.name} loading="lazy" />
          <div class="creature-info">
            <h2>{creature.name}</h2>
            <p class="scientific-name">{creature.scientificName}</p>
            <p class="description" set:html={truncateDescription(creature.description)}></p>
            <div class="metadata">
              <span class="tag">{creature.category}</span>
              <span class="tag">{creature.subcategory}</span>
            </div>
            <a href={`/creature/${creature.id}`} class="learn-more">
              Learn More â†’
            </a>
          </div>
        </div>
      ))}
    </div>

    <div id="pagination" class="pagination">
      {pagination.map(page => (
        <a href={`?q=${query}&page=${page.number}`} class={page.isCurrent ? 'current' : ''}>
          {page.number}
        </a>
      ))}
    </div>
  </div>
</Layout>

<script>
  // Get all creatures data from the server-side rendered content
  const allCreatures = Array.from(document.querySelectorAll('.creature-card')).map(card => ({
    element: card.outerHTML,
    searchText: (
      card.textContent +
      card.querySelector('.scientific-name')?.textContent +
      card.querySelector('.tag')?.textContent
    ).toLowerCase()
  }));

  const pageSize = 18;
  let currentPage = 1;
  
  const searchInput = document.getElementById('search-input');
  const resultsGrid = document.getElementById('results-grid');
  const resultsInfo = document.getElementById('results-info');
  const paginationContainer = document.getElementById('pagination');

  function debounce(func, wait) {
    let timeout;
    return function(...args) {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), wait);
    };
  }

  function filterAndDisplayResults() {
    const query = searchInput.value.toLowerCase().trim();
    let filteredResults;

    if (query === '') {
      filteredResults = allCreatures;
    } else {
      filteredResults = allCreatures.filter(item => 
        item.searchText.includes(query)
      );
    }

    // Update results count
    if (query) {
      resultsInfo.innerHTML = `<p>Found ${filteredResults.length} results for "${query}"</p>`;
    } else {
      resultsInfo.innerHTML = '';
    }

    // Display current page
    const start = (currentPage - 1) * pageSize;
    const end = start + pageSize;
    const pageResults = filteredResults.slice(start, end);
    
    resultsGrid.innerHTML = pageResults.map(item => item.element).join('');

    // Update pagination
    const totalPages = Math.ceil(filteredResults.length / pageSize);
    const paginationHTML = Array.from({ length: totalPages }, (_, i) => i + 1)
      .map(num => `
        <a href="#" class="${num === currentPage ? 'current' : ''}" data-page="${num}">
          ${num}
        </a>
      `).join('');
    
    paginationContainer.innerHTML = paginationHTML;

    // Add click handlers to pagination
    paginationContainer.querySelectorAll('a').forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        currentPage = parseInt(link.dataset.page);
        filterAndDisplayResults();
        window.scrollTo(0, 0);
      });
    });
  }

  // Debounced search handler
  const debouncedSearch = debounce(() => {
    currentPage = 1; // Reset to first page on new search
    filterAndDisplayResults();
  }, 300);

  // Add event listener for input
  searchInput.addEventListener('input', debouncedSearch);

  // Initial display
  filterAndDisplayResults();
</script>

<style>
  .search-container {
    width: 100%;
    margin: 0 auto;
    padding: 2rem;
  }

  h1 {
    text-align: center;
    margin-bottom: 4rem;
    font-size: 2.5rem;
    color: #333;
  }

  .search-form {
    margin-bottom: 3rem;
  }

  .search-input-wrapper {
    max-width: 600px;
    margin: 0 auto;
    display: flex;
    gap: 0.5rem;
  }

  input {
    flex: 1;
    padding: 0.75rem;
    border: 2px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
  }

  button {
    padding: 0.75rem 1.5rem;
    background: #333;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  button:hover {
    background: #444;
  }

  .results-info {
    text-align: center;
    margin-bottom: 2rem;
    color: #666;
  }

  .results-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
    width: 100%;
    margin-top: 2rem;
  }

  .creature-card {
    border: 1px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.2s;
    display: flex;
    flex-direction: column;
    background: white;
  }

  .creature-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  }

  .creature-card img {
    width: 100%;
    height: 200px;
    object-fit: cover;
  }

  .creature-info {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    flex: 1;
  }

  h2 {
    margin: 0 0 0.5rem 0;
    color: #333;
    font-size: 1.5rem;
  }

  .scientific-name {
    font-style: italic;
    color: #666;
    margin: 0 0 0.5rem 0;
  }

  .description {
    margin: 0 0 1rem 0;
    line-height: 1.4;
    color: #444;
    flex-grow: 1;
  }

  .metadata {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .tag {
    background: #f0f0f0;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.9rem;
    color: #666;
  }

  .no-results {
    grid-column: 1 / -1;
    text-align: center;
    padding: 2rem;
    background: #f8f8f8;
    border-radius: 8px;
    color: #666;
  }

  .learn-more {
    display: inline-block;
    padding: 0.5rem 1rem;
    background: var(--primary-color);
    color: white;
    text-decoration: none;
    border-radius: 4px;
    transition: background 0.3s ease;
    align-self: flex-start;
  }

  .learn-more:hover {
    background: var(--accent-color);
  }

  @media (max-width: 768px) {
    .search-container {
        padding: 1rem;
    }

    .search-input-wrapper {
        flex-direction: column;
    }

    button {
        width: 100%;
    }
  }

  .pagination {
    display: flex;
    justify-content: center;
    margin-top: 2rem;
  }

  .pagination a {
    margin: 0 0.5rem;
    padding: 0.5rem 1rem;
    background: #f0f0f0;
    border-radius: 4px;
    text-decoration: none;
    color: #333;
  }

  .pagination a.current {
    background: #333;
    color: white;
  }
</style>