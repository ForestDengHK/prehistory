---
import Layout from '../../layouts/Layout.astro';
import { creatures } from '../../data/creatures';
import { prehistoricFacts } from '../../data/facts';
import fs from 'node:fs/promises';
import path from 'node:path';

const title = 'Image Optimization';

// Get all unique image paths
const creatureImages = creatures.map(c => c.image);
const factImages = prehistoricFacts.map(f => f.image);
const allImages = [...new Set([...creatureImages, ...factImages])];

// Get image details
const imageDetails = await Promise.all(
  allImages.map(async (imagePath) => {
    try {
      const fullPath = path.join(process.cwd(), 'public', imagePath);
      const stats = await fs.stat(fullPath);
      const extension = path.extname(imagePath).toLowerCase();
      return {
        path: imagePath,
        size: stats.size,
        extension,
        sizeFormatted: (stats.size / 1024 / 1024).toFixed(2) + ' MB'
      };
    } catch (error) {
      console.error(`Error getting details for ${imagePath}:`, error);
      return {
        path: imagePath,
        size: 0,
        extension: path.extname(imagePath).toLowerCase(),
        sizeFormatted: 'N/A'
      };
    }
  })
);

// Sort images by size (largest first)
const sortedImages = imageDetails.sort((a, b) => b.size - a.size);
---

<Layout title={title}>
  <div class="container">
    <a href="/admin" class="back-link">‚Üê Back to Admin</a>
    <h1>{title}</h1>

    <div class="optimization-panel">
      <section class="form-section">
        <h2>Batch Image Optimization</h2>
        <p class="help-text">
          Select images to optimize. Images will be:
          <ul>
            <li>Converted to WebP format for better compression</li>
            <li>Resized to optimal dimensions (max 1200x800)</li>
            <li>Compressed with minimal quality loss</li>
            <li>Generated with thumbnails for previews</li>
          </ul>
        </p>

        <div class="sort-controls">
          <button type="button" id="sort-size" class="sort-button active">Sort by Size</button>
          <button type="button" id="sort-name" class="sort-button">Sort by Name</button>
        </div>

        <div class="image-grid" id="image-grid">
          {sortedImages.map(image => (
            <div class="image-item" data-size={image.size} data-name={image.path}>
              <label class="image-checkbox">
                <input 
                  type="checkbox" 
                  name="images" 
                  value={image.path}
                  data-original={image.path}
                >
                <div class="image-preview">
                  <img src={image.path} alt="Preview" loading="lazy">
                </div>
                <div class="image-info">
                  <span class="filename">{image.path.split('/').pop()}</span>
                  <div class="image-metadata">
                    <span class="size">{image.sizeFormatted}</span>
                    <span class="extension">{image.extension}</span>
                  </div>
                  <span class="status"></span>
                </div>
              </label>
            </div>
          ))}
        </div>

        <div class="actions">
          <button type="button" id="select-all">Select All</button>
          <button type="button" id="optimize-selected" class="primary">Optimize Selected</button>
        </div>

        <div id="progress" class="progress hidden">
          <div class="progress-bar"></div>
          <div class="progress-text">Processing images... <span id="progress-count"></span></div>
        </div>

        <div id="message" class="message hidden"></div>
      </section>
    </div>
  </div>
</Layout>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .back-link {
    display: inline-block;
    color: var(--text-color);
    text-decoration: none;
    margin-bottom: 1rem;
    transition: color 0.2s ease-in-out;
  }

  .back-link:hover {
    color: var(--primary-color);
  }

  h1 {
    font-size: 2rem;
    font-weight: 600;
    color: var(--primary-color);
    text-align: center;
    margin-bottom: 2rem;
  }

  .optimization-panel {
    background-color: white;
    border-radius: 1rem;
    padding: 2rem;
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
  }

  .form-section {
    margin-bottom: 2rem;
  }

  h2 {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--primary-color);
    margin-bottom: 1rem;
  }

  .help-text {
    color: var(--secondary-color);
    margin-bottom: 2rem;
  }

  .help-text ul {
    margin-top: 0.5rem;
    margin-left: 1.5rem;
  }

  .help-text li {
    margin-bottom: 0.25rem;
  }

  .image-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .image-item {
    position: relative;
  }

  .image-checkbox {
    display: block;
    cursor: pointer;
  }

  .image-checkbox input {
    position: absolute;
    top: 0.5rem;
    left: 0.5rem;
    z-index: 1;
  }

  .image-preview {
    position: relative;
    padding-top: 75%;
    border-radius: 0.5rem;
    overflow: hidden;
    background: var(--background-color);
  }

  .image-preview img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .image-info {
    margin-top: 0.5rem;
    font-size: 0.875rem;
  }

  .filename {
    display: block;
    color: var(--text-color);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .status {
    display: block;
    font-size: 0.75rem;
    color: var(--secondary-color);
  }

  .actions {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  button {
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--primary-color);
    border-radius: 0.5rem;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease-in-out;
  }

  button:not(.primary) {
    background: none;
    color: var(--primary-color);
  }

  button.primary {
    background: var(--primary-color);
    color: white;
  }

  button:hover {
    transform: translateY(-1px);
  }

  .progress {
    margin-top: 1rem;
    padding: 1rem;
    border-radius: 0.5rem;
    background: var(--background-color);
  }

  .progress-bar {
    height: 4px;
    background: var(--primary-color);
    width: 0%;
    transition: width 0.3s ease-in-out;
    border-radius: 2px;
  }

  .progress-text {
    margin-top: 0.5rem;
    font-size: 0.875rem;
    color: var(--secondary-color);
    text-align: center;
  }

  .message {
    margin-top: 1rem;
    padding: 1rem;
    border-radius: 0.5rem;
    font-size: 0.875rem;
  }

  .message.success {
    background-color: #f0fdf4;
    color: #15803d;
    border: 1px solid #bbf7d0;
  }

  .message.error {
    background-color: #fef2f2;
    color: #b91c1c;
    border: 1px solid #fecaca;
  }

  .hidden {
    display: none;
  }

  .sort-controls {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .sort-button {
    padding: 0.5rem 1rem;
    border: 1px solid var(--primary-color);
    border-radius: 0.5rem;
    background: none;
    color: var(--primary-color);
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .sort-button.active {
    background: var(--primary-color);
    color: white;
  }

  .image-metadata {
    display: flex;
    justify-content: space-between;
    font-size: 0.75rem;
    color: var(--secondary-color);
    margin-top: 0.25rem;
  }

  .size {
    font-weight: 500;
  }

  .extension {
    text-transform: uppercase;
    background: var(--background-color);
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
  }
</style>

<script>
  const imageGrid = document.getElementById('image-grid');
  const sortSizeBtn = document.getElementById('sort-size');
  const sortNameBtn = document.getElementById('sort-name');
  const selectAllBtn = document.getElementById('select-all');
  const optimizeBtn = document.getElementById('optimize-selected');
  const progress = document.getElementById('progress');
  const progressBar = progress?.querySelector('.progress-bar');
  const progressCount = document.getElementById('progress-count');
  const message = document.getElementById('message');
  const checkboxes = document.querySelectorAll<HTMLInputElement>('input[type="checkbox"]');

  // Sorting functions
  function sortBySize() {
    const items = Array.from(document.querySelectorAll('.image-item'));
    items.sort((a, b) => {
      const sizeA = Number(a.getAttribute('data-size'));
      const sizeB = Number(b.getAttribute('data-size'));
      return sizeB - sizeA;
    });
    items.forEach(item => imageGrid?.appendChild(item));
    sortSizeBtn?.classList.add('active');
    sortNameBtn?.classList.remove('active');
  }

  function sortByName() {
    const items = Array.from(document.querySelectorAll('.image-item'));
    items.sort((a, b) => {
      const nameA = a.getAttribute('data-name') || '';
      const nameB = b.getAttribute('data-name') || '';
      return nameA.localeCompare(nameB);
    });
    items.forEach(item => imageGrid?.appendChild(item));
    sortNameBtn?.classList.add('active');
    sortSizeBtn?.classList.remove('active');
  }

  // Add event listeners for sorting
  sortSizeBtn?.addEventListener('click', sortBySize);
  sortNameBtn?.addEventListener('click', sortByName);

  // Handle select all
  selectAllBtn?.addEventListener('click', () => {
    const isAllSelected = Array.from(checkboxes).every(cb => cb.checked);
    checkboxes.forEach(cb => cb.checked = !isAllSelected);
  });

  // Handle optimization
  optimizeBtn?.addEventListener('click', async () => {
    const selectedImages = Array.from(checkboxes)
      .filter(cb => cb.checked)
      .map(cb => ({
        path: cb.value,
        element: cb.closest('.image-item')
      }));

    if (selectedImages.length === 0) {
      if (message) {
        message.textContent = 'Please select at least one image to optimize';
        message.className = 'message error';
      }
      return;
    }

    try {
      // Show progress
      if (progress) progress.classList.remove('hidden');
      if (message) message.classList.add('hidden');
      
      // Disable buttons
      if (selectAllBtn) selectAllBtn.disabled = true;
      if (optimizeBtn) optimizeBtn.disabled = true;
      if (sortSizeBtn) sortSizeBtn.disabled = true;
      if (sortNameBtn) sortNameBtn.disabled = true;

      // Process each image
      const total = selectedImages.length;
      let completed = 0;
      let failed = 0;

      // Process images in parallel with a concurrency limit of 3
      const concurrencyLimit = 3;
      const chunks = [];
      for (let i = 0; i < selectedImages.length; i += concurrencyLimit) {
        chunks.push(selectedImages.slice(i, i + concurrencyLimit));
      }

      for (const chunk of chunks) {
        await Promise.all(chunk.map(async ({ path, element }) => {
          const status = element?.querySelector('.status');
          if (status) status.textContent = 'Processing...';

          try {
            // Get the file from the path
            const response = await fetch(path);
            if (!response.ok) throw new Error('Failed to fetch image');
            
            const blob = await response.blob();
            const filename = path.split('/').pop() || '';
            
            // Create form data
            const formData = new FormData();
            formData.append('image', blob, filename);
            formData.append('directory', path.includes('/facts/') ? 'facts' : '');

            // Upload and optimize with timeout
            const uploadResponse = await Promise.race([
              fetch('/api/upload-image', {
                method: 'POST',
                body: formData
              }),
              new Promise((_, reject) => 
                setTimeout(() => reject(new Error('Optimization timeout')), 30000)
              )
            ]);

            if (!uploadResponse.ok) throw new Error('Failed to optimize image');

            const result = await uploadResponse.json();

            // Update image references in data files
            const updateResponse = await fetch('/api/update-image-references', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                oldPath: path,
                newPath: result.path
              })
            });

            if (!updateResponse.ok) {
              throw new Error('Failed to update image references');
            }

            // Update status
            if (status) status.textContent = 'Optimized & Updated ‚úì';
            if (element) element.classList.add('optimized');

            // Update progress
            completed++;
            if (progressBar) progressBar.style.width = `${(completed / total) * 100}%`;
            if (progressCount) progressCount.textContent = `${completed}/${total}`;

          } catch (error) {
            failed++;
            if (status) status.textContent = 'Failed ‚úó';
            console.error(`Failed to optimize ${path}:`, error);
          }
        }));
      }

      // Show completion message
      if (message) {
        if (failed > 0) {
          message.textContent = `Completed with some issues: ${completed} optimized, ${failed} failed`;
          message.className = 'message warning';
        } else {
          message.textContent = `Successfully optimized ${completed} out of ${total} images`;
          message.className = 'message success';
        }
      }

    } catch (error) {
      if (message) {
        message.textContent = error instanceof Error ? error.message : 'An error occurred';
        message.className = 'message error';
      }
    } finally {
      // Re-enable buttons
      if (selectAllBtn) selectAllBtn.disabled = false;
      if (optimizeBtn) optimizeBtn.disabled = false;
      if (sortSizeBtn) sortSizeBtn.disabled = false;
      if (sortNameBtn) sortNameBtn.disabled = false;
    }
  });
</script> 