---
import Layout from '../../layouts/Layout.astro';
import { list } from '@vercel/blob';
import { creatures } from '../../data/creatures';

interface Like {
    id: string;
    creatureId: string;
    clientIp: string;
    createdAt: string;
}

interface CreatureLikes {
    creatureId: string;
    name: string;
    totalLikes: number;
    details: Like[];
}

let creatureLikesData: CreatureLikes[] = [];
let error: string | null = null;

try {
    // Check if we have the blob token
    const blobToken = import.meta.env.BLOB_READ_WRITE_TOKEN;
    if (!blobToken) {
        throw new Error('Blob storage token not configured. Please check your environment variables.');
    }

    // Fetch all like files
    const { blobs } = await list({ token: blobToken });
    const likeBlobs = blobs.filter(blob => 
        blob.pathname.startsWith('likes/') && 
        blob.pathname.endsWith('.json')
    );

    // Group blobs by creature ID
    const blobsByCreature = likeBlobs.reduce((acc, blob) => {
        const creatureId = blob.pathname
            .replace('likes/', '')
            .replace(/\.json$/, '')
            .replace(/-\d{4}-\d{2}-\d{2}$/, ''); // Remove date suffix if present
        if (!acc[creatureId]) {
            acc[creatureId] = [];
        }
        acc[creatureId].push(blob);
        return acc;
    }, {} as Record<string, typeof blobs>);

    // Process each creature's likes
    for (const [creatureId, creatureBlobs] of Object.entries(blobsByCreature)) {
        try {
            // Get the latest blob for this creature
            const latestBlob = creatureBlobs.reduce((latest, current) => {
                return !latest || current.uploadedAt > latest.uploadedAt ? current : latest;
            });

            const response = await fetch(latestBlob.url);
            if (response.ok) {
                const likes: Like[] = await response.json();
                const creature = creatures.find(c => c.id === creatureId);
                
                creatureLikesData.push({
                    creatureId,
                    name: creature?.name || creatureId,
                    totalLikes: likes.length,
                    details: likes
                });
            }
        } catch (error) {
            console.error(`Error fetching likes for creature ${creatureId}:`, error);
        }
    }

    // Sort creatures by number of likes (descending)
    creatureLikesData.sort((a, b) => b.totalLikes - a.totalLikes);

} catch (e) {
    error = e instanceof Error ? e.message : 'An unknown error occurred';
    console.error('Error loading likes:', e);
}

// Get base URL for links
const baseUrl = import.meta.env.PROD ? 'https://prehistoricworld.vercel.app' : '';
---

<Layout title="Like Statistics">
    <div class="container">
        <a href="/admin" class="back-link">← Back to Admin</a>
        <h1>Like Statistics</h1>
        
        {error ? (
            <div class="error-message">
                <h2>Error Loading Likes</h2>
                <p>{error}</p>
                <p class="help-text">Please ensure your environment variables are properly configured and try again.</p>
            </div>
        ) : (
            <div class="likes-container">
                <div class="summary-stats">
                    <div class="stat-card">
                        <h3>Total Creatures with Likes</h3>
                        <p class="stat-number">{creatureLikesData.length}</p>
                    </div>
                    <div class="stat-card">
                        <h3>Total Likes</h3>
                        <p class="stat-number">{creatureLikesData.reduce((sum, item) => sum + item.totalLikes, 0)}</p>
                    </div>
                </div>

                <div class="likes-table">
                    <table>
                        <thead>
                            <tr>
                                <th>Rank</th>
                                <th>Creature</th>
                                <th>Likes</th>
                                <th>Last Like</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {creatureLikesData.map((item, index) => (
                                <tr>
                                    <td class="rank">#{index + 1}</td>
                                    <td>
                                        <a 
                                            href={`${baseUrl}/creature/${item.creatureId}`}
                                            target="_blank"
                                            rel="noopener noreferrer"
                                            class="creature-link"
                                            title={`View ${item.name}`}
                                        >
                                            {item.name}
                                            <span class="external-icon">↗</span>
                                        </a>
                                    </td>
                                    <td class="likes-count">{item.totalLikes}</td>
                                    <td>
                                        {item.details.length > 0 
                                            ? new Date(Math.max(...item.details.map(d => new Date(d.createdAt).getTime()))).toLocaleString()
                                            : '-'
                                        }
                                    </td>
                                    <td>
                                        <button 
                                            class="view-details-btn"
                                            data-creature-id={item.creatureId}
                                            data-details={JSON.stringify(item.details)}
                                        >
                                            View Details
                                        </button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            </div>
        )}

        <!-- Details Modal -->
        <div id="details-modal" class="modal hidden">
            <div class="modal-content">
                <div class="modal-header">
                    <h2>Like Details: <span id="modal-creature-name"></span></h2>
                    <button class="close-modal">&times;</button>
                </div>
                <div class="modal-body">
                    <table>
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>IP Address</th>
                            </tr>
                        </thead>
                        <tbody id="modal-details">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</Layout>

<style>
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1rem;
    }

    .back-link {
        display: inline-block;
        color: var(--text-color);
        text-decoration: none;
        margin-bottom: 1rem;
        transition: color 0.2s ease-in-out;
    }

    .back-link:hover {
        color: var(--primary-color);
    }

    h1 {
        font-size: 2rem;
        font-weight: 600;
        color: var(--primary-color);
        text-align: center;
        margin-bottom: 2rem;
    }

    .summary-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: white;
        padding: 1.5rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        text-align: center;
    }

    .stat-card h3 {
        font-size: 1rem;
        color: var(--text-color);
        margin-bottom: 0.5rem;
    }

    .stat-number {
        font-size: 2rem;
        font-weight: bold;
        color: var(--primary-color);
    }

    .likes-table {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        overflow-x: auto;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        padding: 1rem;
        text-align: left;
        border-bottom: 1px solid #eee;
    }

    th {
        background: #f5f5f5;
        font-weight: 600;
    }

    .rank {
        font-weight: 600;
        color: var(--primary-color);
    }

    .likes-count {
        font-weight: 600;
    }

    .creature-link {
        color: var(--primary-color);
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
        transition: color 0.2s ease;
    }

    .creature-link:hover {
        color: var(--accent-color);
        text-decoration: underline;
    }

    .external-icon {
        font-size: 0.75rem;
        opacity: 0.7;
    }

    .view-details-btn {
        background: none;
        border: 1px solid var(--primary-color);
        color: var(--primary-color);
        padding: 0.5rem 1rem;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .view-details-btn:hover {
        background: var(--primary-color);
        color: white;
    }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        border-radius: 8px;
        width: 90%;
        max-width: 800px;
        max-height: 90vh;
        overflow-y: auto;
    }

    .modal-header {
        padding: 1rem;
        border-bottom: 1px solid #eee;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-header h2 {
        margin: 0;
        font-size: 1.25rem;
    }

    .close-modal {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        padding: 0.5rem;
        line-height: 1;
    }

    .modal-body {
        padding: 1rem;
    }

    .hidden {
        display: none;
    }

    @media (max-width: 768px) {
        .stat-card {
            padding: 1rem;
        }

        .stat-number {
            font-size: 1.5rem;
        }
    }
</style>

<script>
    const viewDetailsButtons = document.querySelectorAll('.view-details-btn');
    const modal = document.getElementById('details-modal');
    const closeModal = document.querySelector('.close-modal');
    const modalCreatureName = document.getElementById('modal-creature-name');
    const modalDetails = document.getElementById('modal-details');
    const creatures = new Map(window.creatures?.map(c => [c.id, c.name]) || []);

    viewDetailsButtons.forEach(button => {
        button.addEventListener('click', () => {
            const creatureId = button.getAttribute('data-creature-id');
            const details = JSON.parse(button.getAttribute('data-details') || '[]');
            
            if (modalCreatureName && modalDetails && creatureId) {
                modalCreatureName.textContent = creatures.get(creatureId) || creatureId;
                modalDetails.innerHTML = details
                    .sort((a: any, b: any) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
                    .map((like: any) => `
                        <tr>
                            <td>${new Date(like.createdAt).toLocaleString()}</td>
                            <td>${like.clientIp}</td>
                        </tr>
                    `)
                    .join('');
                
                modal?.classList.remove('hidden');
            }
        });
    });

    closeModal?.addEventListener('click', () => {
        modal?.classList.add('hidden');
    });

    modal?.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.classList.add('hidden');
        }
    });
</script> 