---
import Layout from '../../layouts/Layout.astro';
import { list } from '@vercel/blob';
import { creatures } from '../../data/creatures';

// Get base URL for links
const baseUrl = import.meta.env.PROD ? 'https://prehistoricworld.vercel.app' : '';

interface Like {
    id: string;
    creatureId: string;
    clientIp: string;
    createdAt: string;
}

interface CreatureLikeSummary {
    id: string;
    name: string;
    likeCount: number;
    lastLiked: string;
}

let likeSummaries: CreatureLikeSummary[] = [];
let error: string | null = null;

try {
    // Check if we have the blob token
    const blobToken = import.meta.env.BLOB_READ_WRITE_TOKEN;
    if (!blobToken) {
        throw new Error('Blob storage token not configured. Please check your environment variables.');
    }

    // Create a map of creature IDs to names
    const creatureMap = new Map(creatures.map(c => [c.id, c.name]));

    // Fetch all like files
    const { blobs } = await list({ token: blobToken });
    const likeBlobs = blobs.filter(blob => 
        blob.pathname.startsWith('likes/') && 
        blob.pathname.endsWith('.json')
    );

    // Group blobs by creature ID
    const blobsByCreature = likeBlobs.reduce((acc, blob) => {
        const creatureId = blob.pathname
            .replace('likes/', '')
            .replace('.json', '')
            .split('-')[0]; // Remove date suffix if present
        if (!acc[creatureId]) {
            acc[creatureId] = [];
        }
        acc[creatureId].push(blob);
        return acc;
    }, {} as Record<string, typeof blobs>);

    // Process each creature's likes
    for (const [creatureId, creatureBlobs] of Object.entries(blobsByCreature)) {
        try {
            // Get the latest blob for this creature
            const latestBlob = creatureBlobs.reduce((latest, current) => {
                return !latest || current.uploadedAt > latest.uploadedAt ? current : latest;
            });

            const response = await fetch(latestBlob.url);
            if (response.ok) {
                const likes: Like[] = await response.json();
                
                // Find the exact creature ID from the creatures data if it exists
                const exactCreatureId = creatures.find(c => c.id === creatureId)?.id || creatureId;
                
                likeSummaries.push({
                    id: exactCreatureId,
                    name: creatureMap.get(exactCreatureId) || creatureId,
                    likeCount: likes.length,
                    lastLiked: likes.length > 0 
                        ? new Date(Math.max(...likes.map(l => new Date(l.createdAt).getTime()))).toISOString()
                        : '-'
                });
            }
        } catch (error) {
            console.error(`Error fetching likes for creature ${creatureId}:`, error);
        }
    }

    // Sort summaries by like count (descending)
    likeSummaries.sort((a, b) => b.likeCount - a.likeCount);

} catch (e) {
    error = e instanceof Error ? e.message : 'An unknown error occurred';
    console.error('Error loading likes:', e);
}

// Get total likes across all creatures
const totalLikes = likeSummaries.reduce((sum, summary) => sum + summary.likeCount, 0);
---

<Layout title="Manage Likes">
    <div class="container">
        <a href="/admin" class="back-link">← Back to Admin</a>
        <h1>Like Management</h1>
        
        {error ? (
            <div class="error-message">
                <h2>Error Loading Likes</h2>
                <p>{error}</p>
                <p class="help-text">Please ensure your environment variables are properly configured and try again.</p>
            </div>
        ) : (
            <>
                <div class="summary-stats">
                    <div class="stat-card">
                        <h3>Total Likes</h3>
                        <p class="stat-number">{totalLikes}</p>
                    </div>
                    <div class="stat-card">
                        <h3>Creatures with Likes</h3>
                        <p class="stat-number">{likeSummaries.length}</p>
                    </div>
                </div>

                <div class="likes-table">
                    <table>
                        <thead>
                            <tr>
                                <th>Creature</th>
                                <th>Likes</th>
                                <th>Last Liked</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {likeSummaries.map(summary => (
                                <tr>
                                    <td>
                                        <a 
                                            href={summary.id === 'about' 
                                                ? `${baseUrl}/about`
                                                : `${baseUrl}/creature/${summary.id}`}
                                            target="_blank"
                                            rel="noopener noreferrer"
                                            class="creature-link"
                                        >
                                            {summary.name}
                                            <span class="external-icon">↗</span>
                                        </a>
                                    </td>
                                    <td class="like-count">{summary.likeCount}</td>
                                    <td>{summary.lastLiked !== '-' 
                                        ? new Date(summary.lastLiked).toLocaleString()
                                        : '-'}</td>
                                    <td>
                                        <button 
                                            class="view-details-btn"
                                            data-creature-id={summary.id}
                                            data-creature-name={summary.name}
                                        >
                                            View Details
                                        </button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>

                <div id="details-modal" class="modal hidden">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h2>Like Details: <span id="modal-creature-name"></span></h2>
                            <button class="close-modal">×</button>
                        </div>
                        <div class="modal-body">
                            <div id="like-details"></div>
                        </div>
                    </div>
                </div>
            </>
        )}
    </div>
</Layout>

<style>
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1rem;
    }

    .back-link {
        display: inline-block;
        color: var(--text-color);
        text-decoration: none;
        margin-bottom: 1rem;
        transition: color 0.2s ease-in-out;
    }

    .back-link:hover {
        color: var(--primary-color);
    }

    h1 {
        font-size: 2rem;
        font-weight: 600;
        color: var(--primary-color);
        text-align: center;
        margin-bottom: 2rem;
    }

    .summary-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: white;
        padding: 1.5rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        text-align: center;
    }

    .stat-card h3 {
        color: var(--text-color);
        margin-bottom: 0.5rem;
        font-size: 1rem;
    }

    .stat-number {
        font-size: 2rem;
        font-weight: 600;
        color: var(--primary-color);
    }

    .likes-table {
        overflow-x: auto;
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        padding: 1rem;
        text-align: left;
        border-bottom: 1px solid #eee;
    }

    th {
        background: #f5f5f5;
        font-weight: 600;
    }

    .like-count {
        font-weight: 600;
        color: var(--primary-color);
    }

    .creature-link {
        color: var(--primary-color);
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
        transition: color 0.2s ease;
    }

    .creature-link:hover {
        color: var(--accent-color);
        text-decoration: underline;
    }

    .external-icon {
        font-size: 0.75rem;
        opacity: 0.7;
    }

    .view-details-btn {
        background-color: var(--primary-color);
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 4px;
        cursor: pointer;
        transition: opacity 0.2s;
    }

    .view-details-btn:hover {
        opacity: 0.9;
    }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal.hidden {
        display: none;
    }

    .modal-content {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        width: 90%;
        max-width: 800px;
        max-height: 90vh;
        overflow-y: auto;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .details-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 0;
    }

    .details-table th,
    .details-table td {
        padding: 1rem;
        text-align: left;
        border-bottom: 1px solid #eee;
    }

    .details-table th {
        background: #f5f5f5;
        font-weight: 600;
    }

    .details-table tbody tr:hover {
        background-color: #f8f9fa;
    }

    .country-cell {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .close-modal {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        padding: 0.5rem;
        line-height: 1;
    }

    @media (max-width: 768px) {
        .stat-card {
            padding: 1rem;
        }

        .stat-number {
            font-size: 1.5rem;
        }

        .modal-content {
            padding: 1rem;
        }

        .details-table th,
        .details-table td {
            padding: 0.5rem;
        }
    }
</style>

<script>
    const modal = document.getElementById('details-modal');
    const modalCreatureName = document.getElementById('modal-creature-name');
    const likeDetails = document.getElementById('like-details');
    const viewDetailsButtons = document.querySelectorAll('.view-details-btn');
    const closeModalButton = document.querySelector('.close-modal');

    // Function to get country from IP
    async function getCountryFromIP(ip) {
        try {
            const response = await fetch(`https://ip2c.org/${ip}`);
            const data = await response.text();
            const [status, country_code, country_code2, country_name] = data.split(';');
            return status === '1' ? { code: country_code2, name: country_name } : null;
        } catch (error) {
            console.error('Error fetching country:', error);
            return null;
        }
    }

    // Handle view details button clicks
    viewDetailsButtons.forEach(button => {
        button.addEventListener('click', async () => {
            const creatureId = button.dataset.creatureId;
            const creatureName = button.dataset.creatureName;

            try {
                // Show loading state
                if (modalCreatureName) modalCreatureName.textContent = creatureName;
                if (likeDetails) {
                    likeDetails.innerHTML = `
                        <div class="like-details-header">
                            <p>Loading like details...</p>
                        </div>
                    `;
                }
                if (modal) modal.classList.remove('hidden');

                // Fetch the likes from our API endpoint
                const response = await fetch(`/api/likes/${creatureId}`);
                if (!response.ok) {
                    throw new Error('Failed to fetch like details');
                }

                const likes = await response.json();

                // Fetch country information for each IP
                const likesWithCountry = await Promise.all(
                    likes.map(async (like) => {
                        const country = await getCountryFromIP(like.clientIp);
                        return {
                            ...like,
                            country
                        };
                    })
                );

                // Update modal content
                if (likeDetails) {
                    likeDetails.innerHTML = `
                        <table class="details-table">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>IP Address</th>
                                    <th>Country</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${likesWithCountry.map(like => `
                                    <tr>
                                        <td>${new Date(like.createdAt).toLocaleString()}</td>
                                        <td>${like.clientIp}</td>
                                        <td>${like.country?.name || 'Unknown'}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    `;
                }

            } catch (error) {
                console.error('Error fetching like details:', error);
                showError('Failed to load like details. Please try again.');
            }
        });
    });

    // Close modal when clicking the close button
    closeModalButton?.addEventListener('click', () => {
        if (modal) modal.classList.add('hidden');
    });

    // Close modal when clicking outside
    modal?.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.classList.add('hidden');
        }
    });

    function showError(message) {
        alert(message);
    }
</script> 