---
import Layout from '../../layouts/Layout.astro';
import { categories } from '../../data/categories';

const title = 'Add New Creature';
---

<Layout title={title}>
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-4xl font-bold mb-8 text-center">{title}</h1>
    
    <form id="add-creature-form" class="max-w-2xl mx-auto bg-white p-6 rounded-lg shadow-md">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div class="form-group">
          <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Name</label>
          <input type="text" id="name" name="name" required
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
        </div>

        <div class="form-group">
          <label for="scientificName" class="block text-sm font-medium text-gray-700 mb-1">Scientific Name</label>
          <input type="text" id="scientificName" name="scientificName" required
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
        </div>

        <div class="form-group">
          <label for="period" class="block text-sm font-medium text-gray-700 mb-1">Period</label>
          <input type="text" id="period" name="period" required
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
        </div>

        <div class="form-group">
          <label for="location" class="block text-sm font-medium text-gray-700 mb-1">Location</label>
          <input type="text" id="location" name="location" required
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
        </div>

        <div class="form-group">
          <label for="length" class="block text-sm font-medium text-gray-700 mb-1">Length</label>
          <input type="text" id="length" name="length" required placeholder="e.g., 12-15 meters"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
        </div>

        <div class="form-group">
          <label for="weight" class="block text-sm font-medium text-gray-700 mb-1">Weight</label>
          <input type="text" id="weight" name="weight" required placeholder="e.g., 5-7 tons"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
        </div>

        <div class="form-group">
          <label for="diet" class="block text-sm font-medium text-gray-700 mb-1">Diet</label>
          <input type="text" id="diet" name="diet" required
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
        </div>

        <div class="form-group">
          <label for="image" class="block text-sm font-medium text-gray-700 mb-1">Image Path</label>
          <input type="text" id="image" name="image" required placeholder="/images/creature-name.jpg"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
        </div>

        <div class="form-group">
          <label for="category" class="block text-sm font-medium text-gray-700 mb-1">Category</label>
          <select id="category" name="category" required
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option value="">Select a category</option>
            {Object.keys(categories).map(category => (
              <option value={category}>{category}</option>
            ))}
          </select>
        </div>

        <div class="form-group">
          <label for="subcategory" class="block text-sm font-medium text-gray-700 mb-1">Subcategory</label>
          <select id="subcategory" name="subcategory" required
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option value="">Select a category first</option>
          </select>
        </div>
      </div>

      <div class="form-group mt-6">
        <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
        <textarea id="description" name="description" required rows="4"
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
      </div>

      <div class="mt-6">
        <button type="submit"
          class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
          Add Creature
        </button>
      </div>

      <div id="message" class="mt-4 p-4 rounded-md hidden"></div>
    </form>
  </div>
</Layout>

<script>
  import { categories } from '../../data/categories';

  const form = document.getElementById('add-creature-form') as HTMLFormElement;
  const categorySelect = document.getElementById('category') as HTMLSelectElement;
  const subcategorySelect = document.getElementById('subcategory') as HTMLSelectElement;
  const messageDiv = document.getElementById('message') as HTMLDivElement;

  // Update subcategories when category changes
  categorySelect.addEventListener('change', () => {
    const category = categorySelect.value;
    const subcategories = categories[category] || [];
    
    subcategorySelect.innerHTML = subcategories.length 
      ? subcategories.map(sub => `<option value="${sub}">${sub}</option>`).join('')
      : '<option value="">Select a category first</option>';
  });

  // Handle form submission
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    try {
      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries());
      
      const response = await fetch('/api/creatures', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });
      
      const result = await response.json();
      
      if (response.ok) {
        messageDiv.textContent = 'Creature added successfully!';
        messageDiv.className = 'mt-4 p-4 rounded-md bg-green-100 text-green-700';
        form.reset();
      } else {
        throw new Error(result.error || 'Failed to add creature');
      }
    } catch (error) {
      messageDiv.textContent = error.message;
      messageDiv.className = 'mt-4 p-4 rounded-md bg-red-100 text-red-700';
    }
    
    messageDiv.classList.remove('hidden');
  });
</script>